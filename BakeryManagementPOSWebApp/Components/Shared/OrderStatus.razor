@switch (status)
{
	case Status.Complete:
		<Badge Color="BadgeColor.Success" Class="@Class">Completed</Badge>
		break;
	case Status.PassedPickupDate:
		<Badge Color="BadgeColor.Warning" Class="@Class">Late Pickup</Badge>
		break;
	case Status.WaitingPickup:
		<Badge Color="BadgeColor.Info" Class="@Class">Awaiting Pickup</Badge>
		break;
	case Status.NeedsProcessing:
		<Badge Color="BadgeColor.Primary" Class="@Class">Needs Processing</Badge>
		break;
	default:
		<Badge Color="BadgeColor.Dark" Class="@Class">Unknown</Badge>
		break;
}

@code {
	[Parameter]
	public Order? order { get; set; }

	[Parameter]
	public Status status { get; set; } = Status.Unknown;

	[Parameter]
	public string? Class { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (order is not null)
		{
			if (order.Processed is not null)
			{
				status = Status.Complete;
			}
			else if (order.PickedUp is not null)
			{
				status = Status.NeedsProcessing;
			}
			else if (order.Pickup is not null && order.Pickup < DateTime.Now)
			{
				status = Status.PassedPickupDate;
			}
			else if (order.Pickup is not null)
			{
				status = Status.WaitingPickup;
			}
			else
			{
				status = Status.Unknown;
			}
		}
	}
}
