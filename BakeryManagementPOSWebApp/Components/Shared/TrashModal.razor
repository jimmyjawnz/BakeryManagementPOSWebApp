<Modal @ref="ModalRef" Title="@Title"
UseStaticBackdrop="true"
CloseOnEscape="false"
IsVerticallyCentered="true"
Size="ModalSize.Large">

	<BodyTemplate>
		@if (Type.Equals("trash"))
		{
			<h2>Move <strong>@ObjectName</strong> to trash?</h2>
		}
		else if (Type.Equals("delete"))
		{
			<h2>Delete <strong>@ObjectName</strong>?</h2>
		}
		else
		{
			<h2>Restore <strong>@ObjectName</strong>?</h2>
		}
		<p>@Text</p>
		<div class="form-group row">
			<div class="col-md-12">
				<Button @onclick="@Hide" Color="ButtonColor.Secondary" Class="float-end me-2">@CancelText</Button>
				@if (Type.Equals("restore"))
				{
					<Button @ref="submitButton" @onclick="@Submit" Color="ButtonColor.Success" Class="float-end me-2">@SubmitText</Button>

				}
				else
				{
					<Button @ref="submitButton" @onclick="@Submit" Color="ButtonColor.Danger" Class="float-end me-2">@SubmitText</Button>
				}
			</div>
		</div>
	</BodyTemplate>
</Modal>

@code {
	public Modal ModalRef { get; set; } = default!;
	private Button submitButton { get; set; } = default!;

	[Parameter]
	public string Type { get; set; } = "trash";

	[Parameter]
	public string Title { get; set; } = "Are you sure?";

	[Parameter]
	public string Text { get; set; } = "This item will be put into the trash.";

	[Parameter]
	public string ObjectName { get; set; } = "Object";

	[Parameter]
	public EventCallback SubmitMethod { get; set; }

	[Parameter]
	public string CancelText { get; set; } = "Cancel";
	[Parameter]
	public string SubmitText { get; set; } = "Confirm";

	private async Task Submit()
	{
		if (Type.Equals("trash"))
			submitButton.ShowLoading("Moving to trash...");
		else if (Type.Equals("delete"))
			submitButton.ShowLoading("Deleting...");
		else
			submitButton.ShowLoading("Restoring...");

		await SubmitMethod.InvokeAsync();
		await Task.Delay(100);
		await Hide();
	}

	public async Task Hide()
	{
		await ModalRef.HideAsync();
	}

	public async Task Show()
	{
		await ModalRef.ShowAsync();
	}
}
