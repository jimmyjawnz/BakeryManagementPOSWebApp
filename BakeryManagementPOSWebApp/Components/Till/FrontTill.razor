@layout EmptyLayout
@page "/till"

@attribute [Authorize]

<PageTitle>Front Till</PageTitle>
<title>Front Till</title>

@inject ProductService ProductService
@inject CustomerService CustomerService
@inject EmployeeService EmployeeService
@inject UserManager<Employee> UserManager
@inject OrderService OrderService
@inject NavigationManager Navigation

@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

<Toasts class="p-3" Messages="ToastMessages" AutoHide="true" Delay="10000" Placement="ToastsPlacement.TopRight" />

<ConfirmDialog @ref="ConfirmModal" />

<div class="container-fluid" style="min-height: 100vh" id="content">
    @if(!EmptyOrder)
    {
        @* Nav Bar *@
        <div class="row">
            <NavMenu Height="5vh" />
        </div>
    }
    <div class="row" style="min-height: 95vh">
        @* Products/Orders View *@
        <div class="col-md-6 p-1">
            <div class="h-100 bg-light">
                <Tabs @ref="tabs" NavStyle="NavStyle.Pills">
                    @* Products Tab *@
                    <Tab OnClick="OnClickProductsTab" Active="true" Name="Products">
                        <TitleTemplate>
                        <i class="bi bi-box-seam"></i> Products
                        </TitleTemplate>
                        <Content>
                            <div class="p-1">
                                <CardProducts Products="@products" OnCartChanged="UpdatedCart" OnError="(ex) => OnError((Exception?)(ex))" CurrentOrder="@CurrentOrder" />
                            </div>
                        </Content>
                    </Tab>
                    @* Orders Tab *@
                    @if (!EmptyOrder)
                    {
                        <Tab Name="Orders">
                        <TitleTemplate>
                        <i class="bi bi-boxes"></i> Orders
                        </TitleTemplate>
                        <Content>
                            <div class="p-1">
                                @if (orders is null)
                                {
                                    <UserMessage Color="AlertColor.Secondary" Type="MessageType.Loading" />
                                }
                                else if (orders.Count <= 0)
                                {
                                    <UserMessage Color="AlertColor.Warning" Type="MessageType.Info"Message="No available products found." />
                                }
                                else
                                {
                            	    <table class="table table-striped table-hover">
		                                <thead>
			                                <tr>
				                                <th width="15%">ID #</th>
				                                <th width="10%">Status</th>
				                                <th width="30%">Customer</th>
				                                <th width="30%">Notes</th>
				                                <th width="15%" class="text-center"></th>
			                                </tr>
		                                </thead>
		                                <tbody class="table-group-divider">
                                            @foreach (Order item in orders)
                                            {
                                                @if(true)
                                                {
                                                    <tr>
                                                    <td>@item.Id</td>
                                                    <td class="text-center">
                                                        <OrderStatus status="Status.PassedPickupDate" />
                                                    </td>
                                                    <td>@item.OrderedBy.FullName</td>
                                                    <td>@item.Notes</td>
                                                    <td>
                                                        <Button @onclick="() => AddOrderToCart(item)" Color="ButtonColor.Primary" Class="float-end">Select</Button>
                                                    </td>
                                                </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                }
                            </div>
                        </Content>
                    </Tab>
                    }
                </Tabs>
            </div>
        </div>
        <div class="col-md-6">
            <div class="row h-100 p-1">
                @* Cart *@
                <div class="col-md-6 bg-light p-0" >
                    <div style="height:94vh; overflow-y:scroll">
                        <table class="table table-striped table-hover">
                            <thead class="position-sticky top-0 table-primary" >
                                <tr>
                                    <th width="15%" class="text-center">Qty</th>
                                    <th>Product</th>
                                    <th width="20%" class="text-end">Price</th>
                                    <th width="10%" class="text-center">
                                        <Button @ref="ClearButton" @onclick="ClearCart" Color="ButtonColor.Danger" Outline="true">Clear</Button>
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="table-group-divider">
                                @if (CurrentOrder.OrderItems is null || CurrentOrder.OrderItems.Count <= 0)
                                {
                                    <tr>
                                        <td colspan="4" class="text-center bg-light-subtle">
                                            <UserMessage Color="AlertColor.Secondary" Type="MessageType.Info" Message="Cart is empty." />
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var item in CurrentOrder.OrderItems!)
                                    {
                                        <tr>
                                            <td class="text-center">
                                                <Button @onclick="() => ChangeQty(item, 1)" Color="ButtonColor.Secondary" Size="ButtonSize.ExtraSmall" Class="m-0">+</Button>
                                                @item.Quantity
                                                <Button @onclick="() => ChangeQty(item, -1)" Color="ButtonColor.Secondary" Size="ButtonSize.ExtraSmall" Class="m-0">-</Button>
                                            </td>
                                            <td>
                                                @if (item.Product.Name.Length > 53)
                                                {
                                                    <Tooltip Color="TooltipColor.Light" Placement="TooltipPlacement.Right" Class="d-inline-block" Title="@item.Product.Name">
                                                        @item.Product.Name.Substring(0, Math.Min(50, item.Product.Name.Length))...
                                                    </Tooltip>
                                                }
                                                else
                                                {
                                                    @item.Product.Name
                                                }
                                            </td>
                                            <td class="text-end">
                                                @String.Format("{0:C2}", item.RowPrice)
                                                <br />
                                                <span class="text-muted" style="font-size: small;">(@String.Format("{0:C2}", item.Product!.Price))</span>
                                            </td>
                                            <td class="text-end">
                                                <Button @onclick="() => RemoveFromCart(item)" Color="ButtonColor.Danger"><i class="bi bi-trash"></i></Button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-md-6">
                    @* Payment Proccessing *@
                    <div class="row" style="height: 62vh">
                        <div class="col p-0">
                            <Card Class="border-primary border-5 h-100">
                                <h4 class="card-header mt-2">Order Processing</h4>
                                <CardBody>
                                    <EditForm FormName="OrderForm" EditContext="editContext" OnValidSubmit="SubmitOrder">
                                        <DataAnnotationsValidator />
                                        <ValidationMessage For="() => CurrentOrder.EmployeeID" />
                                        <ValidationMessage For="() => CurrentOrder.OrderItems" />

                                        <div class="form-group row mt-2 mb-2">
                                            <div class="col-md-5 col-md-12">
                                                <label>Customer</label>
                                                <AutoComplete @bind-Value="@customerPhone"
                                                              TItem="Customer"
                                                              DataProvider="CustomersDataProvider"
                                                              PropertyName="PhoneAndName"
                                                              Placeholder="Search a phone number..."
                                                              OnChanged="(Customer customer) => OnAutoCompleteChanged(customer)" />
                                                <ValidationMessage For="() => CurrentOrder.CustomerID" />
                                                @if (CurrentOrder.OrderedBy is null)
                                                {
                                                    <span class="text-muted">No customer selected.</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Selected: @CurrentOrder.OrderedBy.FullName</span>
                                                }
                                            </div>
                                        </div>
                                        @if(!EmptyOrder)
                                        {
                                            <div class="form-group row mb-2">
                                                <div class="col-md-5 col-md-12">
                                                    <label>Payment Type</label>
                                                    <InputSelect class="form-select" @bind-Value="@CurrentOrder.PaymentType">
                                                        <option selected disabled value="">Select a Payment Type</option>
                                                        <option value="Cash">Cash</option>
                                                        <option value="Credit">Credit</option>
                                                        <option value="CashAndCredit">Cash & Credit</option>
                                                        <option value="ETransfer">E-Transfer</option>
                                                        <option value="Other">Other</option>
                                                    </InputSelect>
                                                    <ValidationMessage For="() => CurrentOrder.PaymentType" />
                                                </div>
                                            </div>
                                        }
                                        <div class="form-group row mb-2">
                                            <div class="col-md-5 col-md-12">
                                                <label>Discount Amount (%)</label>
                                                <NumberInput Value="CurrentOrder.DiscountPercent" TValue="int" ValueExpression="() => CurrentOrder.DiscountPercent" ValueChanged="(value) => ChangedDiscountPercent(value)" EnableMinMax="true" Min="0" Max="100" />
                                            </div>
                                        </div>
                                        @if (EmptyOrder)
                                        {
                                            <div class="form-group row mb-2">
                                                <div class="col-md-5 col-md-12">
                                                    <label>Pickup Date</label>
                                                    <DateInput @bind-Value="@CurrentOrder.PickedUp" EnableMinMax=true Min="DateTime.Now" />
                                                </div>
                                            </div>
                                        }
                                        <Card Class="border-secondary text-end mb-2">
                                            <div class="form-group row mb-2">
                                                <label class="col-md-6 col-form-label">Sum of Items: </label>
                                                <div class="col-md-6">
                                                    <input class="form-control-plaintext" readonly="" value="@String.Format("{0:C2}", CurrentOrder.SumOfItems)" />
                                                </div>
                                                <label class="col-md-6 col-form-label">Discount: </label>
                                                <div class="col-md-6">
                                                    <input class="form-control-plaintext" readonly="" value="@String.Format("{0:C2}", CurrentOrder.DiscountAmount)" />
                                                </div>
                                                <label class="col-md-6 col-form-label"><strong>Total: </strong></label>
                                                <div class="col-md-6">
                                                    <input class="form-control-plaintext" readonly="" value="@String.Format("{0:C2}", CurrentOrder.TotalAmount)" />
                                                </div>
                                            </div>
                                        </Card>
                                        <div class="row mb-2">
                                            @if (!EmptyOrder)
                                            {
                                                <AuthorizeView Context="authcontext">
                                                    <span class="text-muted text-end mt-1 mb-1">This Order will be processed by <strong>@authcontext.User.Identity!.Name</strong></span>
                                                </AuthorizeView>
                                                <Button @ref="submitButton" Type="ButtonType.Submit" Color="ButtonColor.Success" Block=true Size="ButtonSize.Large">Process Order</Button>
                                            }
                                            else
                                            {
                                                <Button @ref="submitButton" Type="ButtonType.Submit" Color="ButtonColor.Success" Block=true Size="ButtonSize.Large">Add Order</Button>
                                            }
                                        </div>
                                    </EditForm>
                                </CardBody>
                            </Card>
                        </div>
                    </div>
                    @if(!EmptyOrder)
                    {
                        @* Calculator *@
                        <div class="row" style="height: 32vh">
                            <div class="col bg-secondary">
                                <span><i class="fa-solid fa-calculator me-1"></i> Calculator</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool EmptyOrder { get; set; } = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<ToastMessage> ToastMessages = new();

    private List<Product>? products { get; set; } = new();
    private List<Order>? orders { get; set; } = new();

    private int Amount { get; set; } = 1;

    private EditContext editContext { get; set; } = default!;
    private ValidationMessageStore? messageStore;
    private Button submitButton { get; set; } = default!;

    private Button ClearButton { get; set; } = default!;
    private ConfirmDialog ConfirmModal = default!;

    private Tabs tabs { get; set; } = default!;

    [Parameter]
    public Order CurrentOrder { get; set; } = new();

    private bool isOrder { get; set; } = false;
    private string? customerPhone;

    protected override async Task OnInitializedAsync()
    {
        CurrentOrder ??= new();

        
        customerPhone = CurrentOrder.OrderedBy.PhoneAndFullName;

        editContext = new(CurrentOrder);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);

        await LoadData();
    }
    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {   
        messageStore?.Clear();

        // Custom validation logic
        if (CurrentOrder.OrderItems is null || CurrentOrder.OrderItems.Count <= 0)
        {
            messageStore?.Add(() => CurrentOrder.OrderItems!, "Cannot proccess when cart is empty.");
        }

    }

    public async Task LoadData()
    {
        products = null;
        orders = null;
        await Task.Delay(10);
        products = await ProductService.GetAvailableProducts();
        orders = await OrderService.GetExistingOrders();
    }

    private async Task OnClickProductsTab()
    {
        if(CurrentOrder.Id != 0 && EmptyOrder == false)
        {
            var confirmation = await ConfirmModal.ShowAsync(
            title: "Are you sure?",
            message1: "Changing to the Products tab will clear the current selected order.",
            message2: "Do you want to proceed?"
        );

            if (confirmation)
            {
                CurrentOrder = new();
                await tabs.ShowTabByNameAsync("Products");
                return;
            }

            await tabs.ShowTabByNameAsync("Orders");
        }
    }

    private void UpdatedCart()
    {
        
    }

    private void ChangedDiscountPercent(int value)
    {
        CurrentOrder.DiscountPercent = value;
        UpdatedCart();
    }

    public async Task ClearCart()
    {
        if (CurrentOrder.OrderItems!.Count <= 0)
        {
            return;
        }
        var confirmation = await ConfirmModal.ShowAsync(
            title: "Are you sure you want to clear the cart?",
            message1: "This will remove all products/orders in the cart.",
            message2: "Do you want to proceed?"
        );

        if (confirmation)
        {
            CurrentOrder.OrderItems!.Clear();
            UpdatedCart();
        }
    }

    public void AddToCart(Product product)
    {
        if (product is not null)
        {
            CurrentOrder.OrderItems!.Add(new OrderItem()
            {
                Product = product,
                ProductId = product.Id,
                Quantity = Amount,
                RowPrice = product.Price * Amount
            });

            Amount = 1;
            UpdatedCart();
        }
    }

    public void RemoveFromCart(OrderItem orderItem)
    {
        if (orderItem is not null)
        {
            CurrentOrder.OrderItems!.Remove(orderItem);
            UpdatedCart();
        }

    }

    public void ChangeQty(OrderItem orderItem, int amount)
    {
        if (orderItem is not null)
        {
            if (orderItem.Quantity <= 1 && amount < 0)
            {
                RemoveFromCart(orderItem);
            }
            else if (orderItem.Quantity <= 99)
            {
                if (orderItem.Quantity == 99 && amount > 0)
                    return;
                var item = CurrentOrder.OrderItems!.FirstOrDefault(o => o.DateCreated == orderItem.DateCreated);
                item!.Quantity += amount;
            }
            UpdatedCart();
        }
    }

    public void AddOrderToCart(Order order)
    {
        if (order is not null)
        {
            isOrder = true;
            CurrentOrder = order;
            editContext.NotifyValidationStateChanged();
            UpdatedCart();
        }
    }

    private async Task<AutoCompleteDataProviderResult<Customer>> CustomersDataProvider(AutoCompleteDataProviderRequest<Customer> request)
    {
        var customers = await CustomerService.GetExistingCustomers(request.Filter.Value);
        return await Task.FromResult(new AutoCompleteDataProviderResult<Customer> { Data = customers, TotalCount = customers.Count() });
    }

    private async Task OnAutoCompleteChanged(Customer customer)
    {
        if (customer is not null) {
            CurrentOrder.CustomerID = customer.Id;
            CurrentOrder.OrderedBy = customer;

            var isEmployee = await EmployeeService.GetEmployeeByPhoneNumber(customer.PhoneNumber);

            if (isEmployee is not null)
            {
                CurrentOrder.DiscountPercent = 50;
            }
            else
            {
                CurrentOrder.DiscountPercent = 0;
            }

            editContext.Validate();
            return;
        }

        CurrentOrder.CustomerID = 0;
        CurrentOrder.OrderedBy = null;
        CurrentOrder.DiscountPercent = 0;
    }

    public async Task SubmitOrder()
    {
        int? result = null;

        if (EmptyOrder)
        {
            if(CurrentOrder.Id != 0)
            {
                submitButton.ShowLoading("Updating...");

                result = await OrderService.UpdateOrder(CurrentOrder);

                if (result is null || !result.HasValue)
                {
                    submitButton.HideLoading();
                    return;
                }

                submitButton.HideLoading();
                Navigation.Refresh(true);
                return;
            }

            submitButton.ShowLoading("Creating...");

            CurrentOrder.EmployeeID = null;
            CurrentOrder.Processed = null;
            CurrentOrder.PickedUp = null;

            result = await OrderService.CreateOrder(CurrentOrder);

            if (result is null || !result.HasValue)
            {
                submitButton.HideLoading();
                return;
            }

            submitButton.HideLoading();
            Navigation.Refresh(true);
            return;
        }

        submitButton.ShowLoading("Proccessing...");

        var confirmation = await ConfirmModal.ShowAsync(
            title: "Process Payment for Customer",
            message1: "Please proccess the customer's payment in person to complete the transaction.",
            message2: "Have you completed the transaction?"
        );

        if (confirmation)
        {
            CurrentOrder.EmployeeID = UserManager.GetUserId((await authenticationStateTask).User);
            CurrentOrder.Processed = DateTime.Now;
            CurrentOrder.PickedUp = DateTime.Now;

            if (CurrentOrder.PickupDate is null)
            {
                CurrentOrder.Pickup = DateTime.Now;
            }

            if (isOrder)
            {
                result = await OrderService.UpdateOrder(CurrentOrder);
            }
            else
            {
                result = await OrderService.CreateOrder(CurrentOrder);
            }

            if (result is null || !result.HasValue)
            {
                submitButton.HideLoading();
                return;
            }

            submitButton.HideLoading();
            Navigation.Refresh(true);
        }

        submitButton.HideLoading();
        return;

    }

    private void OnError(Exception? exception)
    {
        if (exception is null)
        {
            exception = new Exception("An unknown Error has occurred.");
        }

        ToastMessages.Add(new()
            {
                Type = ToastType.Danger,
                HelpText = exception.Source,
                IconName = IconName.ExclamationOctagonFill,
            Content = @<div>
                        <Icon Name="IconName.ExclamationOctagonFill" class="me-2"></Icon>
                        ERROR
                        <br />
                        @exception.Message
                       </div>
            }
        );
    }
}
