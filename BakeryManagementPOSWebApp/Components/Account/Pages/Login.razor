@page "/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BakeryManagementPOSWebApp.Data

@implements IAsyncDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory

@inject SignInManager<Employee> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-lg-12">
        <section>
            <UserMessage Type="MessageType.Warning" Color="AlertColor.Danger" Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="mb-3 col-lg-6">
                    <label for="Input.FullName" class="form-label">Username</label>
                    <InputText @bind-Value="Input.FullName" id="Input.FullName" class="form-control" autocomplete="username" aria-required="true" placeholder="John Smith" />
                    <ValidationMessage For="() => Input.FullName" class="text-danger" />
                </div>
                <div class="mb-3 col-lg-6">
                    <label for="Input.Password" class="form-label">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="col-lg-6 btn btn-lg btn-primary ">Log in</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private ApplicationDbContext Context = default!;

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext.Request.Query["ReturnUrl"].ToString().Length > 0)
        {
            errorMessage = "You need to login to access this page.";
        }

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        Context = await DbFactory.CreateDbContextAsync();
    }

    public async Task LoginUser()
    {
        var employee = Context.Employees.Where(p => p.NormalizedUserName == Input.FullName.ToUpper().Replace(" ", "")).FirstOrDefaultAsync();

        if (employee.Result is null || employee.Result.Deleted is not null)
        {
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.FullName.Replace(" ", ""), Input.Password, false, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = false });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    public ValueTask DisposeAsync()
    {
        return Context.DisposeAsync();
    }

    private sealed class InputModel
    {
        [Required]
        public string FullName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
