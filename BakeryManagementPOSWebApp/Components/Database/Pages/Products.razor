@page "/db/products"
@using BakeryManagementPOSWebApp.Components.Database.Pages.Product
@attribute [Authorize]

<PageTitle>Products</PageTitle>
<title>Products</title>
<h2>Products</h2>

@inject NavigationManager NavigationManager
@inject IDbContextFactory<ApplicationDbContext> DbFactory

@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

<TrashModal @ref="trashModal"
	ObjectName="@product.Name"
			SubmitMethod="SubmitRemoval" />

<ProductModal @ref="productInfoModal"
			  ModalType="ModalViewType.Get"/>

<ProductModal @ref="productEditModal"
			ModalType="ModalViewType.Update"
			OnSubmit="() => productList.RefreshData(false)" />

<ProductModal @ref="productCreateModal"
			  ModalType="ModalViewType.Create"
			  OnSubmit="() => productList.RefreshData(false)" />

<AuthorizeView Roles="Manager, Admin">
	<Button @onclick="productCreateModal.Show" Color="ButtonColor.Primary" Size="ButtonSize.Large" class="mb-2">Add Product</Button>
	<Button To="db/products/trash" Color="ButtonColor.Dark" Type="ButtonType.Link" Size="ButtonSize.Large" class="mb-2 float-end">View Trash</Button>
</AuthorizeView>

<List @ref="productList"
	OnEditModal="(product) => productEditModal.Show(product)"
	  OnRemoveModal="(product) => ShowRemoveModal(product)"
	  OnInfoModal="(product) => productInfoModal.Show(product)" />


@code {
	private ApplicationDbContext? Context { get; set; }

	private TrashModal trashModal { get; set; } = default!;

	private List productList { get; set; } = default!;

	private ProductModal productInfoModal { get; set; } = default!;
	private ProductModal productEditModal { get; set; } = default!;
	private ProductModal productCreateModal { get; set; } = default!;

	private Data.Enities.Product product { get; set; } = new();

	[Authorize(Roles = "Manager,Admin")]
	private async Task ShowRemoveModal(Data.Enities.Product item)
	{
		product = item;
		await trashModal.Show();
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task SubmitRemoval()
	{
		Context = DbFactory.CreateDbContext();
		product.Deleted = DateTime.Now;

		Context.Products.Update(product);
		await Context.SaveChangesAsync();
		Context.Dispose();

		await productList.RefreshData(false);
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task ShowEditModal(Data.Enities.Product item)
	{
		await productEditModal.Show(item);
	}

	private async Task ShowInfoModal(Data.Enities.Product item)
	{
		await productInfoModal.Show(item);
	}
}
