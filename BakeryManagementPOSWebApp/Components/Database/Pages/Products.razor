@page "/db/products"

@attribute [Authorize]

<PageTitle>Products</PageTitle>
<title>Products</title>
<h2>Products</h2>

@inject NavigationManager NavigationManager
@inject ProductService Service
@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

<TrashModal @ref="trashModal"
	ObjectName="@product.Name"
			SubmitMethod="SubmitRemoval" />

<Modal @ref="productModal" Title="@ModalTitle"
	   UseStaticBackdrop="true"
	   CloseOnEscape="false"
	   IsVerticallyCentered="true"
	   Size="ModalSize.ExtraLarge">
		<BodyTemplate>

		@if (ModalTitle.Contains("Information"))
		{
			<h3>@product.Name</h3>

			<AuthorizeView Roles="Manager, Admin">
				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">ID: </label>
					<div class="col-md-10">
						<input class="form-control-plaintext" readonly="" value="@product.Id.ToString()" />
					</div>
				</div>
			</AuthorizeView>

			<div class="form-group row mb-2">
				<label class="col-md-2 col-form-label">Created: </label>
				<div class="col-md-10">
					<input class="form-control-plaintext" readonly="" value="@product.DateCreatedStr" />
				</div>
			</div>
			<div class="form-group row mb-2">
				<label class="col-md-2 col-form-label">Last Updated: </label>
				<div class="col-md-10">
					<input class="form-control-plaintext" readonly="" value="@product.DateUpdatedStr" />
				</div>
			</div>

			<hr />

			<div class="form-group row mb-2">
				<label class="col-md-2 col-form-label">Availability: </label>
				<div class="col-md-10">
					@if (product.IsAvailable)
					{
						<strong class="text-success"><i class="bi bi-check-lg"></i> Yes</strong>
					}
					else
					{
						<strong class="text-danger"><i class="bi bi-x-lg"></i> No</strong>
					}
				</div>
			</div>
			<div class="form-group row mb-2">
				<label class="col-md-2 col-form-label">Name: </label>
				<div class="col-md-10">
					<input class="form-control-plaintext" readonly="" value="@product.Name" />
				</div>
			</div>

			<div class="form-group row mb-2">
				<label class="col-md-2 col-form-label">Price: </label>
				<div class="col-md-10">
					<input class="form-control-plaintext" readonly="" value="@product.Price" />
				</div>
			</div>

			<div class="form-group row mb-2">
				<label class="col-md-2 col-form-label">Description: </label>
				<div class="col-md-10">
					<input class="form-control-plaintext" readonly="" value="@product.Description" />
				</div>
			</div>
			<div class="form-group row">
				<div class="col-md-12">
					<Button @onclick="@HideModal" Color="ButtonColor.Secondary" Class="float-end me-2">Close</Button>
				</div>
			</div>
		}
		else 
		{
			<EditForm EditContext="editContext" FormName="AddProduct" OnValidSubmit="SubmitForm">
				<DataAnnotationsValidator />

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Availability: </label>
					<div class="col-md-10">
						<Switch @bind-Value="@product.IsAvailable" Class="mt-2" />
						<ValidationMessage For="() => product.IsAvailable" />
					</div>
				</div>

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Product Name: <span class="text-danger">*</span></label>
					<div class="col-md-10">
						<TextInput @bind-Value="@product.Name" Placeholder="Enter product name" />
						<ValidationMessage For="() => product.Name" />
					</div>
				</div>

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Price: <span class="text-danger">*</span></label>
					<div class="col-md-10">
						<CurrencyInput TValue="decimal" @bind-Value="@product.Price" Placeholder="Enter price" />
						<ValidationMessage For="() => product.Price" />
					</div>
				</div>

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Product Description: </label>
					<div class="col-md-10">
						<TextInput @bind-Value="@product.Description" Placeholder="Enter product description" />
						<ValidationMessage For="() => product.Description" />
					</div>
				</div>
				<div class="form-group row">
					<div class="col-md-12">
						<Button @onclick="@HideModal" Color="ButtonColor.Secondary" Class="float-end me-2">Cancel</Button>
						<Button @ref="submitButton" Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2">@ModalTitle</Button>
					</div>
				</div>
			</EditForm>
		}
	</BodyTemplate>
</Modal>

<AuthorizeView Roles="Manager, Admin">
	<Button @onclick="ShowAddModal" Color="ButtonColor.Primary" Size="ButtonSize.Large" class="mb-2">Add Product</Button>
	<Button To="db/products/trash" Color="ButtonColor.Dark" Type="ButtonType.Link" Size="ButtonSize.Large" class="mb-2 float-end">View Trash</Button>
</AuthorizeView>

@if (products is null)
{
	<UserMessage Color="AlertColor.Secondary" Type="MessageType.Loading" />
}
else 
{
	@if (products.Count == 0)
	{
		<UserMessage Color="AlertColor.Danger" Type="MessageType.Error" ErrorNumber="100" Message="No existing products found in database." />
	}
	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th width="15%">Name</th>
				<th width="15%">Price</th>
				<th width="40%">Description</th>
				<th width="15%">Group</th>
				<th width="5%" class="text-center">Availability</th>
				<th width="10%" class="text-center"><Button @ref="RefreshButton" @onclick="RefreshData" Color="ButtonColor.Info" Outline="true">Refresh</Button></th>
			</tr>
		</thead>
		<tbody class="table-group-divider">
			@foreach (var item in products)
			{
				@if (item.DateDeleted is null)
				{
					<tr @ondblclick="(() => ShowInfoModal(item))">
						<td>@item.Name</td>
						<td>@String.Format("{0:C2}", item.Price)</td>
						<td>@item.Description</td>
						<td></td>
						<td class="text-center">
							@if (item.IsAvailable)
							{
								<strong class="text-success"><i class="bi bi-check-lg"></i> Yes</strong>
							}
							else
							{
								<strong class="text-danger"><i class="bi bi-x-lg"></i> No</strong>
							}
						</td>
						<td class="text-center">
							<AuthorizeView Roles="Manager, Admin">
								<Button @onclick="() => ShowEditModal(item)" Color="ButtonColor.Info"><i class="bi bi-pencil-square"></i></Button>
								<Button @onclick="() => ShowRemoveModal(item)" Color="ButtonColor.Danger"><i class="bi bi-trash"></i></Button>
							</AuthorizeView>
						</td>
					</tr>
				}
			}
		</tbody>
	</table>
}


@code {
	private TrashModal trashModal { get; set; } = default!;

	private Modal productModal { get; set; } = default!;
	private string ModalTitle { get; set; } = string.Empty;

	private EditContext editContext { get; set; } = default!;
	private Product product { get; set; } = new();

	private List<Product>? products { get; set; } = new();
	private Button RefreshButton { get; set; } = default!;

	private Button submitButton { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	public async Task LoadData()
	{
		products = null;
		await Task.Delay(1000);
		products = await Service.GetExistingProducts();
	}

	private void RefreshData()
	{
		NavigationManager.Refresh(true);
	}

	private async Task ShowRemoveModal(Product item)
	{
		product = item;
		await trashModal.Show();
	}

	private async Task SubmitRemoval()
	{
		await Service.SoftDeleteProduct(product);
		await LoadData();
	}

	private async Task SubmitForm()
	{
		submitButton.ShowLoading("Loading...");

		if (ModalTitle.Contains("Add"))
		{
			await Service.CreateProduct(product);
		}
		else if (ModalTitle.Contains("Edit"))
		{
			await Service.UpdateProduct(product);
		}

		await LoadData();
		await HideModal();
		submitButton.HideLoading();
	}

	private async Task ShowAddModal()
	{
		product = new();
		ModalTitle = "Add Product";
		editContext = new EditContext(product);
		await productModal.ShowAsync();
	}

	private async Task ShowEditModal(Product item)
	{
		product = item;
		ModalTitle = "Edit Product - " + product.Name;
		editContext = new EditContext(product);
		await productModal.ShowAsync();
	}

	private async Task ShowInfoModal(Product item)
	{
		product = await Service.GetProduct(item.Id);
		ModalTitle = "Product Information";
		editContext = new EditContext(product);
		await productModal.ShowAsync();
	}

	private async Task HideModal()
	{
		await productModal.HideAsync();
	}
}
