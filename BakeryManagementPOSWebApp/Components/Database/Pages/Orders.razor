@page "/db/orders"

@attribute [Authorize]

<PageTitle>Orders</PageTitle>
<title>Orders</title>
<h2>Orders</h2>

@inject NavigationManager NavigationManager
@inject OrderService Service
@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

<TrashModal @ref="trashModal"
			ObjectName="@order.OrderIdentifier"
			SubmitMethod="SubmitRemoval" />

<Modal @ref="orderModal" Title="@ModalTitle"
	   UseStaticBackdrop="true"
	   CloseOnEscape="false"
	   IsVerticallyCentered="true"
	   Fullscreen="ModalFullscreen.ExtraLargeDown">
		<BodyTemplate>

		@if (ModalTitle.Contains("Information"))
		{
			<h3>
				@order.OrderIdentifier 
				@if (order.IsComplete is null)
				{
					<Badge Color="BadgeColor.Warning">Needs Processing</Badge>
				}
				else if (order.IsComplete == true)
				{
					<Badge Color="BadgeColor.Warning">Complete</Badge>
				}
				else
				{
					<Badge Color="BadgeColor.Warning">Awaiting Pickup</Badge>
				}
			</h3>

			<div class="row mb-2">
				<div class="col-md-6">
					<div class="form-group row mb-2">
						<label class="col-md-2 col-form-label">ID: </label>
						<div class="col-md-4">
							<input class="form-control-plaintext" readonly="" value="@order.Id" />
						</div>
					</div>

					<div class="form-group row mb-2">
						<label class="col-md-2 col-form-label">Date Created: </label>
						<div class="col-md-4">
							<input class="form-control-plaintext" readonly="" value="@order.DateCreatedStr" />
						</div>
					</div>

					<div class="form-group row mb-2">
						<label class="col-md-2 col-form-label">Last Updated: </label>
						<div class="col-md-4">
							<input class="form-control-plaintext" readonly="" value="@order.DateUpdatedStr" />
						</div>
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group row mb-2">
						<label class="col-md-2 col-form-label">Processed by: </label>
						<div class="col-md-4">
							<input class="form-control-plaintext" readonly="" value="@order.ProcessedBy!.FullName" />
						</div>
					</div>
					<div class="form-group row mb-2">
						<label class="col-md-2 col-form-label">Processed Date: </label>
						<div class="col-md-4">
							<input class="form-control-plaintext" readonly="" value="@order.DateProcessedStr" />
						</div>
					</div>
					<div class="form-group row mb-2">
						<label class="col-md-2 col-form-label">Pickup Date: </label>
						<div class="col-md-4">
							<input class="form-control-plaintext" readonly="" value="@order.PickupDateStr" />
						</div>
					</div>
				</div>
			</div>

			<hr />

			<div class="row mb-2">
				<h5>Notes</h5>
				<p>@order.Notes</p>
			</div>

			<Accordion>
				<AccordionItem Title="@(order.CustomerID.ToString() + "-" + @order.OrderedBy!.FullName)">
					<Content>
						<div class="form-group row mb-2">
							<label class="col-md-2 col-form-label">ID: </label>
							<div class="col-md-10">
								<input class="form-control-plaintext" readonly="" value="@order.CustomerID" />
							</div>
						</div>
						<div class="form-group row mb-2">
							<label class="col-md-2 col-form-label">Phone Number: </label>
							<div class="col-md-10">
								<input class="form-control-plaintext" readonly="" value="@order.OrderedBy.PhoneNumber" />
							</div>
						</div>
						<div class="form-group row mb-2">
							<label class="col-md-2 col-form-label">Email: </label>
							<div class="col-md-10">
								<input class="form-control-plaintext" readonly="" value="@order.OrderedBy.EmailAddress" />
							</div>
						</div>
					</Content>
				</AccordionItem>
			</Accordion>

			<div class="form-group row mb-2">
				<label class="col-md-2 col-form-label">Total Sum: </label>
				<div class="col-md-10">
					<input class="form-control-plaintext" readonly="" value="@String.Format("{0:C2}", @order.TotalSum)" />
				</div>
			</div>
			<div class="form-group row">
				<div class="col-md-12">
					<Button @onclick="@HideModal" Color="ButtonColor.Secondary" Class="float-end me-2">Close</Button>
				</div>
			</div>
		}
		else 
		{
			<EditForm EditContext="editContext" FormName="AddOrder" OnValidSubmit="SubmitForm">
				<DataAnnotationsValidator />


				<div class="form-group row">
					<div class="col-md-12">
						<Button @onclick="@HideModal" Color="ButtonColor.Secondary" Class="float-end me-2">Cancel</Button>
						<Button @ref="submitButton" Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2">@ModalTitle</Button>
					</div>
				</div>
			</EditForm>
		}
	</BodyTemplate>
</Modal>

<AuthorizeView Roles="Manager, Admin">
	<Button @onclick="ShowAddModal" Color="ButtonColor.Primary" Size="ButtonSize.Large" class="mb-2">Add Order</Button>
	<Button To="db/orders/trash" Color="ButtonColor.Dark" Type="ButtonType.Link" Size="ButtonSize.Large" class="mb-2 float-end">View Trash</Button>
</AuthorizeView>

@if (orders is null)
{
	<UserMessage Color="AlertColor.Secondary" Type="MessageType.Loading" />
}
else 
{
	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th width="20%">ID</th>
				<th width="10%">Status</th>
				<th width="10%">Total</th>
				<th width="40%">Notes</th>
				<th width="10%" class="text-center"><Button @ref="RefreshButton" @onclick="RefreshData" Color="ButtonColor.Info" Outline="true">Refresh</Button></th>
			</tr>
		</thead>
		<tbody class="table-group-divider">
			@if (orders.Count == 0)
			{
				<tr>
					<td colspan="5" class="text-center">
						<UserMessage Color="AlertColor.Warning" Type="MessageType.Error" ErrorNumber="100" Message="No existing orders found in database." />
					</td>
				</tr>
			}
			@foreach (var item in orders)
			{
				@if (item.DateDeleted is null)
				{
					<tr @ondblclick="(() => ShowInfoModal(item))">
						<td>@item.OrderIdentifier</td>
						<td>
							@if (order.IsComplete is null)
							{
								<Badge Color="BadgeColor.Warning">Needs Processing</Badge>
							}
							else if (order.IsComplete == true)
							{
								<Badge Color="BadgeColor.Warning">Complete</Badge>
							}
							else
							{
								<Badge Color="BadgeColor.Warning">Awaiting Pickup</Badge>
							}
						</td>
						<td>@item.TotalSum</td>
						<td>@item.Notes</td>
						<td class="text-center">
							<AuthorizeView Roles="Manager, Admin">
								<Button @onclick="() => ShowEditModal(item)" Color="ButtonColor.Info"><i class="bi bi-pencil-square"></i></Button>
								<Button @onclick="() => ShowRemoveModal(item)" Color="ButtonColor.Danger"><i class="bi bi-trash"></i></Button>
							</AuthorizeView>
						</td>
					</tr>
				}
			}
		</tbody>
	</table>
}


@code {
	private TrashModal trashModal { get; set; } = default!;

	private Modal orderModal { get; set; } = default!;
	private string ModalTitle { get; set; } = string.Empty;

	private EditContext editContext { get; set; } = default!;
	private Order order { get; set; } = new();

	private List<Order>? orders { get; set; } = new();
	private Button RefreshButton { get; set; } = default!;

	private Button submitButton { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	public async Task LoadData()
	{
		orders = null;
		await Task.Delay(10);
		orders = await Service.GetExistingOrders();
	}

	private void RefreshData()
	{
		NavigationManager.Refresh(true);
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task ShowRemoveModal(Order item)
	{
		order = item;
		await trashModal.Show();
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task SubmitRemoval()
	{
		await Service.SoftDeleteOrder(order);
		await LoadData();
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task SubmitForm()
	{
		int? result = null;
		submitButton.ShowLoading("Loading...");

		if (ModalTitle.Contains("Add"))
		{
			result = await Service.CreateOrder(order);
		}
		else if (ModalTitle.Contains("Edit"))
		{
			await Service.UpdateOrder(order);
		}

		if (result is null)
		{
			submitButton.HideLoading();
			return;
		}

		await LoadData();
		await HideModal();
		submitButton.HideLoading();
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task ShowAddModal()
	{
		order = new();
		ModalTitle = "Add Order";
		editContext = new EditContext(order);
		await orderModal.ShowAsync();
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task ShowEditModal(Order item)
	{
		order = item;
		ModalTitle = "Edit Order - " + order.Id;
		editContext = new EditContext(order);
		await orderModal.ShowAsync();
	}

	private async Task ShowInfoModal(Order item)
	{
		order = await Service.GetOrder(item.Id);
		ModalTitle = "Order Information";
		editContext = new EditContext(order);
		await orderModal.ShowAsync();
	}

	private async Task HideModal()
	{
		await orderModal.HideAsync();
	}
}
