@page "/db/customers/trash"

@attribute [Authorize(Roles = "Admin,Manager")]

<PageTitle>Customer Trash</PageTitle>
<title>Customer Trash</title>
<h2>Customer Trash</h2>

@inject NavigationManager NavigationManager
@inject CustomerService Service
@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

<TrashModal @ref="deleteModal"
	ObjectName="@customer.PhoneNumber"
			SubmitMethod="SubmitRemoval"
			Text="This item will be deleted permanently!"
			Type="delete"/>

<TrashModal @ref="restoreModal"
	ObjectName="@customer.PhoneNumber"
			SubmitMethod="SubmitRestore"
			Text="This item will be restored and moved out of trash."
			Type="restore"/>

<Modal @ref="customerModal" Title="@ModalTitle"
	   IsVerticallyCentered="true"
	   Size="ModalSize.ExtraLarge">
	<BodyTemplate>

		<h3>@customer.PhoneNumber</h3>

		<AuthorizeView Roles="Manager, Admin">
			<div class="form-group row mb-2">
				<label class="col-md-2 col-form-label">ID: </label>
				<div class="col-md-10">
					<input class="form-control-plaintext" readonly="" value="@customer.Id.ToString()" />
				</div>
			</div>
		</AuthorizeView>

		<div class="form-group row mb-2">
			<label class="col-md-2 col-form-label">Date Created: </label>
			<div class="col-md-10">
				<input class="form-control-plaintext" readonly="" value="@customer.DateCreated" />
			</div>
		</div>
		<div class="form-group row mb-2">
			<label class="col-md-2 col-form-label">Date Trashed: </label>
			<div class="col-md-10">
				<input class="form-control-plaintext" readonly="" value="@customer.DateDeleted" />
			</div>
		</div>
		<div class="form-group row mb-2">
			<label class="col-md-2 col-form-label">Last Updated: </label>
			<div class="col-md-10">
				<input class="form-control-plaintext" readonly="" value="@customer.DateUpdated" />
			</div>
		</div>

		<hr />

		<div class="form-group row mb-2">
			<label class="col-md-2 col-form-label">Phone number: </label>
			<div class="col-md-10">
				<input class="form-control-plaintext" readonly="" value="@customer.PhoneNumber" />
			</div>
		</div>

		<div class="form-group row mb-2">
			<label class="col-md-2 col-form-label">First Name: </label>
			<div class="col-md-10">
				<input class="form-control-plaintext" readonly="" value="@customer.FirstName" />
			</div>
		</div>

		<div class="form-group row mb-2">
			<label class="col-md-2 col-form-label">Last Name: </label>
			<div class="col-md-10">
				<input class="form-control-plaintext" readonly="" value="@customer.LastName" />
			</div>
		</div>

		<div class="form-group row mb-2">
			<label class="col-md-2 col-form-label">Email: </label>
			<div class="col-md-10">
				<input class="form-control-plaintext" readonly="" value="@customer.EmailAddress" />
			</div>
		</div>
		<div class="form-group row">
			<div class="col-md-12">
				<Button @onclick="@HideModal" Color="ButtonColor.Secondary" Class="float-end me-2">Close</Button>
			</div>
		</div>
	</BodyTemplate>
</Modal>

<Button To="db/customers" Color="ButtonColor.Dark" Type="ButtonType.Link" Size="ButtonSize.Large" class="mb-2">Back to Customers</Button>

@if (customers is null)
{
	<UserMessage Color="AlertColor.Secondary" Type="MessageType.Loading" />
}
else 
{
	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th width="20%">Name</th>
				<th width="30%">Phone Number</th>
				<th width="30%">Email</th>
				<th width="10%" class="text-center"><Button @ref="RefreshButton" @onclick="RefreshData" Color="ButtonColor.Info" Outline="true">Refresh</Button></th>
			</tr>
		</thead>
		<tbody class="table-group-divider">
			@if (customers.Count == 0)
			{
				<tr>
					<td colspan="4" class="text-center">
						<UserMessage Color="AlertColor.Warning" Type="MessageType.Error" ErrorNumber="100" Message="No trashed customers found in database." />
					</td>
				</tr>
			}
			@foreach (var item in customers)
			{
				@if (item.DateDeleted is not null)
				{
					<tr @ondblclick="(() => ShowInfoModal(item))">
						<td>@item.FullName</td>
						<td>@item.PhoneNumber</td>
						<td>@item.EmailAddress</td>
						<td class="text-center">
							<AuthorizeView Roles="Manager, Admin">
								<Button @onclick="() => ShowRestoreModal(item)" Color="ButtonColor.Success"><i class="bi bi-arrow-counterclockwise"></i></Button>
								<Button @onclick="() => ShowRemoveModal(item)" Color="ButtonColor.Danger"><i class="bi bi-file-earmark-x"></i></Button>
							</AuthorizeView>
						</td>
					</tr>
				}
			}
		</tbody>
	</table>
}


@code {
	private TrashModal deleteModal { get; set; } = default!;
	private TrashModal restoreModal { get; set; } = default!;

	private Modal customerModal { get; set; } = default!;
	private string ModalTitle { get; set; } = string.Empty;

	private EditContext editContext { get; set; } = default!;
	private Data.Enities.Customer customer { get; set; } = new();

	private List<Data.Enities.Customer>? customers { get; set; } = new();
	private Button RefreshButton { get; set; } = default!;

	private Button submitButton { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	public async Task LoadData()
	{
		customers = null;
		await Task.Delay(10);
		customers = await Service.GetTrashedCustomers();
	}

	private void RefreshData()
	{
		NavigationManager.Refresh(true);
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task ShowRemoveModal(Data.Enities.Customer item)
	{
		customer = item;
		await deleteModal.Show();
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task SubmitRemoval()
	{
		await Service.HardDeleteCustomer(customer);
		await LoadData();
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task ShowRestoreModal(Data.Enities.Customer item)
	{
		customer = item;
		await restoreModal.Show();
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task SubmitRestore()
	{
		await Service.RecoverCustomer(customer);
		await LoadData();
	}

	private async Task ShowInfoModal(Data.Enities.Customer item)
	{
		customer = await Service.GetCustomer(item.Id);
		ModalTitle = "Customer Information";
		editContext = new EditContext(customer);
		await customerModal.ShowAsync();
	}

	private async Task HideModal()
	{
		await customerModal.HideAsync();
	}
}
