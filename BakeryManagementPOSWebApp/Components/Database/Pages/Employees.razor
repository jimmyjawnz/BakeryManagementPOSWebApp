@page "/db/employees"
@using BakeryManagementPOSWebApp.Components.Database.Pages.Employee
@attribute [Authorize]

<PageTitle>Employees</PageTitle>
<title>Employees</title>
<h2>Employees</h2>

@inject NavigationManager NavigationManager
@inject IDbContextFactory<ApplicationDbContext> DbFactory

@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

<TrashModal @ref="trashModal"
			ObjectName="@employee.FullName"
			SubmitMethod="SubmitRemoval" />

<EmployeeModal @ref="employeeInfoModal"
			  ModalType="ModalViewType.Get" />

<EmployeeModal @ref="employeeEditModal"
			  ModalType="ModalViewType.Update"
			  OnSubmit="() => employeeList.RefreshData(false)" />

<EmployeeModal @ref="employeeCreateModal"
			  ModalType="ModalViewType.Create"
			  OnSubmit="() => employeeList.RefreshData(false)" />

<AuthorizeView Roles="Manager, Admin">
	<Button @onclick="employeeCreateModal.Show" Color="ButtonColor.Primary" Size="ButtonSize.Large" class="mb-2">Add Employee</Button>
	<Button To="db/employees/trash" Color="ButtonColor.Dark" Type="ButtonType.Link" Size="ButtonSize.Large" class="mb-2 float-end">View Trash</Button>
</AuthorizeView>

<EmployeeList @ref="employeeList"
	  OnEditModal="(employee) => employeeEditModal.Show(employee)"
	  OnRemoveModal="(employee) => ShowRemoveModal(employee)"
	  OnInfoModal="(employee) => employeeInfoModal.Show(employee)" />


@code {
	private ApplicationDbContext? Context { get; set; }

	private TrashModal trashModal { get; set; } = default!;

	private EmployeeList employeeList { get; set; } = default!;

	private EmployeeModal employeeInfoModal { get; set; } = default!;
	private EmployeeModal employeeEditModal { get; set; } = default!;
	private EmployeeModal employeeCreateModal { get; set; } = default!;

	private Data.Enities.Employee employee { get; set; } = new();

	[Authorize(Roles = "Manager,Admin")]
	private async Task ShowRemoveModal(Data.Enities.Employee item)
	{
		employee = item;
		await trashModal.Show();
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task SubmitRemoval()
	{
		Context = DbFactory.CreateDbContext();
		employee.Deleted = DateTime.Now;

		Context.Employees.Update(employee);
		await Context.SaveChangesAsync();
		Context.Dispose();

		await employeeList.RefreshData(false);
	}

	[Authorize(Roles = "Manager,Admin")]
	private async Task ShowEditModal(Data.Enities.Employee item)
	{
		await employeeEditModal.Show(item);
	}

	private async Task ShowInfoModal(Data.Enities.Employee item)
	{
		await employeeInfoModal.Show(item);
	}
}
