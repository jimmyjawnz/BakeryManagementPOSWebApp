@using BakeryManagementPOSWebApp.Data.DataTransfers
@inject IDbContextFactory<ApplicationDbContext> DbFactory

@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

<Toasts class="p-3" Messages="ToastMessages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

@if (ModalType.Equals(ModalViewType.Get))
{
	<Modal @ref="modalRef" Title="Product Information"
		   IsVerticallyCentered="true"
		   Size="ModalSize.ExtraLarge">
		<BodyTemplate>
			<h3>
				@SentProduct.Name
				@if(SentProduct.IsAvailable)
				{
					<Badge Color="BadgeColor.Success" Class="float-end">Available</Badge>
				}
				else
				{
					<Badge Color="BadgeColor.Secondary" Class="float-end">Not Available</Badge>
				}
			</h3>

			<AuthorizeView Roles="Admin">
				<div class="row">
					<label class="col-md-2 col-form-label">ID: </label>
					<div class="col-md-4">
						<input type="text" readonly="" class="form-control-plaintext" value="@SentProduct.Id" />
					</div>
				</div>
			</AuthorizeView>

			<div class="row">
				<label class="col-md-2 col-form-label">Name: </label>
				<div class="col-md-4">
					<input type="text" readonly="" class="form-control-plaintext" value="@SentProduct.Name" />
				</div>
			</div>
			<div class="row">
				<label class="col-md-2 col-form-label">Price: </label>
				<div class="col-md-4">
					<input type="text" readonly="" class="form-control-plaintext" value="@SentProduct.Price" />
				</div>
			</div>
			<div class="row">
				<label class="col-md-2 col-form-label">Description: </label>
				<div class="col-md-4">
					<textarea readonly="" style="resize: none;" class="form-control-plaintext" value="@SentProduct.Description" />
				</div>
			</div>

			<hr />

			<div class="row">
				<label class="col-md-2 col-form-label">Date Created: </label>
				<div class="col-md-4">
					<input type="text" readonly="" class="form-control-plaintext" value="@SentProduct.DateCreated" />
				</div>
			</div>
			<div class="row">
				<label class="col-md-2 col-form-label">Last Updated: </label>
				<div class="col-md-4">
					<input type="text" readonly="" class="form-control-plaintext" value="@SentProduct.DateUpdated" />
				</div>
			</div>
			<div class="row">
				<label class="col-md-2 col-form-label">Date Deleted: </label>
				<div class="col-md-4">
					<input type="text" readonly="" class="form-control-plaintext" value="@SentProduct.DateDeleted" />
				</div>
			</div>

		</BodyTemplate>
	</Modal>
}
else if (ModalType.Equals(ModalViewType.Update))
{
	<Modal @ref="modalRef" Title="@("Edit - " + SentProduct.Name)"
		   UseStaticBackdrop="true"
		   CloseOnEscape="false"
		   IsVerticallyCentered="true"
		   Size="ModalSize.ExtraLarge">
		<BodyTemplate>
			<EditForm EditContext="editContext" FormName="EditProduct" OnValidSubmit="SubmitForm">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Availability: </label>
					<div class="col-md-10">
						<Switch @bind-Value="@productDT.Availability" Class="mt-2" />
						<ValidationMessage For="() => productDT.Availability" />
					</div>
				</div>

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Product Name: </label>
					<div class="col-md-10">
						<TextInput @bind-Value="@productDT.Name" Placeholder="Enter product name" />
						<ValidationMessage For="() => productDT.Name" />
					</div>
				</div>

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Price: </label>
					<div class="col-md-10">
						<CurrencyInput TValue="decimal" @bind-Value="@productDT.Price" Placeholder="Enter price" />
						<ValidationMessage For="() => productDT.Price" />
					</div>
				</div>

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Product Description: </label>
					<div class="col-md-10">
						<TextAreaInput @bind-Value="@productDT.Description" Rows="3" style="resize: none" contenteditable="true" Placeholder="Enter product description" />
						<ValidationMessage For="() => productDT.Description" />
					</div>
				</div>

				<div class="form-group row">
					<div class="col-md-12">
						<Button @onclick="@Hide" Color="ButtonColor.Secondary" Class="float-end me-2">Cancel</Button>
						<Button @ref="submitButton" Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2">Save Changes</Button>
					</div>
				</div>

			</EditForm>
		</BodyTemplate>
	</Modal>
}
else 
{
	<Modal @ref="modalRef" Title="New Product"
			UseStaticBackdrop="true"
			CloseOnEscape="false"
			IsVerticallyCentered="true"
			Size="ModalSize.ExtraLarge">
		<BodyTemplate>
			<EditForm EditContext="editContext" FormName="AddProduct" OnValidSubmit="SubmitForm">
				<DataAnnotationsValidator />

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Availability: </label>
					<div class="col-md-10">
						<Switch @bind-Value="@productDT.Availability" Class="mt-2" />
						<ValidationMessage For="() => productDT.Availability" />
					</div>
				</div>

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Product Name: </label>
					<div class="col-md-10">
						<TextInput @bind-Value="@productDT.Name" Placeholder="Enter product name" />
						<ValidationMessage For="() => productDT.Name" />
					</div>
				</div>

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Price: <span class="text-danger">*</span></label>
					<div class="col-md-10">
						<CurrencyInput TValue="decimal" @bind-Value="@productDT.Price" Placeholder="Enter price" />
						<ValidationMessage For="() => productDT.Price" />
					</div>
				</div>

				<div class="form-group row mb-2">
					<label class="col-md-2 col-form-label">Product Description: </label>
					<div class="col-md-10">
						<TextAreaInput @bind-Value="@productDT.Description" Rows="3" style="resize: none" contenteditable="true" Placeholder="Enter product description" />
						<ValidationMessage For="() => productDT.Description" />
					</div>
				</div>

				<div class="form-group row">
					<div class="col-md-12">
						<Button @onclick="@Hide" Color="ButtonColor.Secondary" Class="float-end me-2">Cancel</Button>
						<Button @ref="submitButton" Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2">Create</Button>
					</div>
				</div>

			</EditForm>
		</BodyTemplate>
	</Modal>
}


@code {
	[Parameter]
	public ModalViewType ModalType { get; set; }

	[Parameter]
	public Product SentProduct { get; set; } = new();

	[Parameter]
	public EventCallback OnSubmit { get; set; }

	private EditContext editContext { get; set; } = default!;
	private ProductDT productDT { get; set; } = new();

	public Modal modalRef { get; set; } = default!;
	private Button submitButton { get; set; } = default!;

	private List<ToastMessage> ToastMessages = new();

	protected override async Task OnInitializedAsync()
	{
		editContext = new(productDT);
	}

	public async Task SubmitForm()
	{
		using var context = DbFactory.CreateDbContext();

		if (ModalType.Equals(ModalViewType.Update))
		{
			submitButton.ShowLoading("Updating...");
			context.Products.Update(new Product()
			{
				Id = SentProduct.Id,
				Name = productDT.Name,
				IsAvailable = productDT.Availability,
				Price = productDT.Price,
				Description = productDT.Description,
				LastUpdated = DateTime.Now,
				Created = SentProduct.Created,
				Deleted = SentProduct.Deleted
			}).State = EntityState.Modified;
		}
		else
		{
			submitButton.ShowLoading("Creating...");
			context.Products.Add(new Product()
			{
				Name = productDT.Name,
				IsAvailable = productDT.Availability,
				Price = productDT.Price,
				Description = productDT.Description
			});
		}

		try
		{
			await context.SaveChangesAsync();
		}
		catch (DbUpdateConcurrencyException ex)
		{
			if (!ProductExists(SentProduct.Id))
			{
				ToastMessages.Add(new()
				{
					Type = ToastType.Danger,
					IconName = IconName.ExclamationOctagonFill,
					Content = @<div>
						<Icon Name="IconName.ExclamationOctagonFill" class="me-2"></Icon>
						ERROR
						<br />
						Unable to update as Product is no longer in the database.
					</div>
				}
				);
				Console.WriteLine("ERROR -> Unable to Update: " + SentProduct.Id + " Product is no longer in the database.");
			}
			else
			{
				ToastMessages.Add(new()
				{
					Type = ToastType.Danger,
					IconName = IconName.ExclamationOctagonFill,
					Content = @<div>
						<Icon Name="IconName.ExclamationOctagonFill" class="me-2"></Icon>
						ERROR
						<br />
						@ex.Message
					</div>
				}
				);
				throw;
			}
		}
		finally
		{
			submitButton.HideLoading();
		}

		if (ModalType.Equals(ModalViewType.Update))
			ToastMessages.Add(new()
				{
					Type = ToastType.Success,
					IconName = IconName.CheckCircle,
					Content =@<div class="text-white">
						<Icon Name="IconName.CheckCircle" class="me-2"></Icon>
						Product <strong>@productDT.Name</strong> Updated!
					</div>
				}
			);
		else
			ToastMessages.Add(new()
				{
					Type = ToastType.Success,
					IconName = IconName.CheckCircle,
					Content =@<div class="text-white">
						<Icon Name="IconName.CheckCircle" class="me-2"></Icon>
						Product <strong>@productDT.Name</strong> Created!
					</div>
	}
			);


		await OnSubmit.InvokeAsync();
		await Hide();
	}

	private bool ProductExists(int id)
	{
		using var context = DbFactory.CreateDbContext();
		return context.Products.Any(e => e.Id == id);
	}

	public async Task Show(Product product)
	{
		SentProduct = product;

		productDT = new()
		{
			Availability = product.IsAvailable,
			Name = product.Name,
			Price = product.Price,
			Description = product.Description
		};
		await modalRef.ShowAsync();
	}

	public async Task Show()
	{
		productDT = new();
		await modalRef.ShowAsync();
	}

	public async Task Hide()
	{
		await modalRef.HideAsync();
	}
}