@implements IAsyncDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory

@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

<Toasts class="p-3" Messages="ToastMessages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

@if (products is null)
{
	<UserMessage Color="AlertColor.Secondary" Type="MessageType.Loading" />
}
else 
{
	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th width="15%">Name</th>
				<th width="15%">Price</th>
				<th width="40%">Description</th>
				<th width="15%">Group</th>
				<th width="5%" class="text-center">Availability</th>
				<th width="10%" class="text-center"><Button @onclick="() => RefreshData(true)" Color="ButtonColor.Info" Outline="true">Refresh</Button></th>
			</tr>
		</thead>
		<tbody class="table-group-divider">
			@if (products.Count == 0)
			{
				<tr>
					<td colspan="6" class="text-center">
						<UserMessage Color="AlertColor.Warning" Type="MessageType.Error" ErrorNumber="100" Message="No existing products found in database." />
					</td>
				</tr>
			}
			@foreach (var item in products)
			{
				@if (item.Deleted is null)
				{
					<tr @ondblclick="() => OnInfoModal.InvokeAsync(item)">
						<td>@item.Name</td>
						<td>@String.Format("{0:C2}", item.Price)</td>
						<td>@item.Description</td>
						<td></td>
						<td class="text-center">
							@if (item.IsAvailable)
							{
								<strong class="text-success"><i class="bi bi-check-lg"></i> Yes</strong>
							}
							else
							{
								<strong class="text-danger"><i class="bi bi-x-lg"></i> No</strong>
							}
						</td>
						<td class="text-center">
							<AuthorizeView Roles="Manager, Admin">
								<Button @onclick="() => OnEditModal.InvokeAsync(item)" Color="ButtonColor.Info"><i class="bi bi-pencil-square"></i></Button>
								<Button @onclick="() => OnRemoveModal.InvokeAsync(item)" Color="ButtonColor.Danger"><i class="bi bi-trash"></i></Button>
							</AuthorizeView>
						</td>
					</tr>
				}
			}
		</tbody>
	</table>
}


@code {
	[Parameter]
	public EventCallback<Product> OnEditModal { get; set; }

	[Parameter]
	public EventCallback<Product> OnRemoveModal { get; set; }

	[Parameter]
	public EventCallback<Product> OnInfoModal { get; set; }

	private ApplicationDbContext Context = default!;

	private List<Product>? products { get; set; } = null;

	private List<ToastMessage> ToastMessages = new();

	protected override async Task OnInitializedAsync()
	{
		Context = await DbFactory.CreateDbContextAsync();
		await LoadData();
	}

	private async Task LoadData()
	{
		products = await Context.Products.OrderBy(p => p.Name).ToListAsync();
	}

	public async Task RefreshData(bool showToast)
	{
		products = null;
		await DisposeAsync();
		Context = await DbFactory.CreateDbContextAsync();
		await LoadData();

		if (showToast)
			ToastMessages.Add(new()
				{
					Type = ToastType.Info,
					IconName = IconName.ArrowClockwise,
					Content =@<div class="text-white">
							<Icon Name="IconName.ArrowClockwise" class="me-2"></Icon>
							Products Refreshed!
						   </div>
				}
			);
	}

	public ValueTask DisposeAsync()
	{
		return Context.DisposeAsync();
	}
}
