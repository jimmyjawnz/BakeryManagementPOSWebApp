<nav class="navbar navbar-expand-lg bg-primary" data-bs-theme="dark" style="max-height: @Height; min-height: @Height;">
    <div class="container-fluid">
        <span class="navbar-brand me-4">Bakery Management</span>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarColor01">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <i class="bi bi-house-fill me-1"></i> Home
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="dashboard">
                        <i class="bi bi-table me-1"></i> Dashboard
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="db">
                        <i class="bi bi-database-fill me-1"></i> Database
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="till">
                        <i class="bi bi-shop me-1"></i> Front Till
                    </NavLink>
                </li>
            </ul>
            
        </div>
        <div class="d-flex">
            <AuthorizeView>
                <Authorized>
                    <i class="bi bi-person-square me-1 text-light" style="font-size: 30px"></i>
                    <div class="nav-item px-3 text-light text-center">
                        <strong >
                            @context.User.Identity?.Name
                        </strong> 
                        <br /> 
                        <div style="line-height:10px;" class="text-dark-emphasis">
                            @if (context.User.IsInRole("Admin"))
                            {
                                <text>(Admin)</text>
                            }
                            else if (context.User.IsInRole("Manager"))
                            {
                                <text>(Manager)</text>
                            }
                            else
                            {
                                <text>(Employee)</text>
                            }
                        </div>
                        
                    </div>
                    <div class="nav-item px-3">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="btn btn-outline-light">
                                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                            </button>
                        </form>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="nav-item px-3 text-light align-content-center">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> Not Logged In
                    </div>
                    <div class="nav-item px-3 align-content-center">
                        <NavLink class="btn btn-light" href="/login">
                            <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                        </NavLink>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

@implements IDisposable

@inject NavigationManager NavigationManager

@code {
    [Parameter]
    public string Height { get; set; } = "80px";

    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

